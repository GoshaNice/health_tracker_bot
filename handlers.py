from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import Form
import aiohttp
from utils import get_base_calories_goal, get_base_water_goal, get_food_calories, get_workout_spent_calories_and_water

router = Router()
users_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/log_water <–∫–æ–ª-–≤–æ –≤ –º–ª> - –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω–æ–π –≤–æ–¥—ã\n"
        "/log_food <–ø—Ä–æ–¥—É–∫—Ç> - –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω–æ–π –ø–∏—â–∏\n"
        "/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö> - –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/check_progress - –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
    )

# FSM: –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(Command("set_profile"))
async def start_form(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥)")
    await state.set_state(Form.weight)

@router.message(Form.weight)
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(weight=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º)")
    await state.set_state(Form.height)
    
@router.message(Form.height)
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
    await state.set_state(Form.age)

@router.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=float(message.text))
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(Form.activity)

@router.message(Form.activity)
async def process_activity(message: Message, state: FSMContext):
    await state.update_data(activity=float(message.text))
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(Form.city)

@router.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()
    base_calories_goal = get_base_calories_goal(weight = data.get("weight"), 
                                                height = data.get("height"),
                                                age = data.get("age"))
    await state.update_data(calorie_goal=base_calories_goal)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="change")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="save")],
        ]
    )
    await message.answer(f"–í–∞—à–∞ –±–∞–∑–æ–≤–∞—è —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {base_calories_goal}. –•–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?", reply_markup=keyboard)
    await state.set_state(Form.calorie_goal)

@router.callback_query(Form.calorie_goal)
async def process_calories_decision(callback_query, state: FSMContext):
    if callback_query.data == "change":
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–ª—å –ø–æ –∫–∞–ª–ª–æ—Ä–∏—è–º")
        await state.set_state(Form.calorie_choose)
    elif callback_query.data == "save":
        data = await state.get_data()
        users_data[callback_query.from_user.username] = data
        await callback_query.message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        await state.clear()

@router.message(Form.calorie_choose)
async def process_activity(message: Message, state: FSMContext):
    await state.update_data(calorie_goal=float(message.text))
    data = await state.get_data()
    users_data[message.from_user.username] = data
    await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    await state.clear()

# --------------------------------

@router.message(Command("log_water"))
async def log_water(message: Message):
    username = message.from_user.username
    data = users_data.get(username, {})
    base_water_norm = await get_base_water_goal(weight=data.get("weight", 0), activity=data.get("activity", 0), city=data.get("city", 0))
    logged_water = data.get("logged_water", 0)
    logged_water += float(message.text.split()[1])
    users_data[username]["logged_water"] = logged_water
    remaining_water = max(0, base_water_norm - logged_water)
    if remaining_water > 0:
        message_remaining = f"–°–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ –≤—ã–ø–∏—Ç—å –µ—â–µ {remaining_water} –º–ª."
    else:
        message_remaining = f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—Ä–º—É, –æ—Ç–ª–∏—á–Ω–æ!"
    await message.answer(f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã –≤—ã–ø–∏–ª–∏ {logged_water} –∏–∑ {base_water_norm} –º–ª –≤–æ–¥—ã. {message_remaining}")


@router.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    username = message.from_user.username
    data = users_data.get(username, {})
    
    food_name = message.text.removeprefix("/log_food").strip()
    # users_data[username]["last_food_consumed"] = food_name
    calories_per_100g = await get_food_calories(food_name = food_name)
    users_data[username]["last_food_calories"] = calories_per_100g
    await message.answer(f"{food_name} ‚Äî {calories_per_100g} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
    await state.set_state(Form.food_consumed)


@router.message(Form.food_consumed)
async def process_food_consumed(message: Message, state: FSMContext):
    username = message.from_user.username
    food_consumed = float(message.text)
    data = users_data.get(username, {})
    last_food_calories = data.get("last_food_calories", 0)
    
    calories_consumed = last_food_calories * food_consumed / 100
    await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {calories_consumed} –∫–∫–∞–ª.")

    last_logged_calories = users_data[username].get("logged_calories", 0)
    users_data[username]["logged_calories"] = last_logged_calories + calories_consumed
    await state.clear()


@router.message(Command("log_workout"))
async def log_workout(message: Message):
    username = message.from_user.username
    data = users_data.get(username, {})
    
    workout_description = message.text.removeprefix("/log_workout").strip()
    calories_spent, water_spent = await get_workout_spent_calories_and_water(description=workout_description)

    burned_calories = data.get("burned_calories", 0)
    burned_calories += calories_spent
    users_data[username]["burned_calories"] = burned_calories
    
    message_water = ""
    if water_spent > 0:
        message_water = f" –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–µ–π—Ç–µ {water_spent} –º–ª –≤–æ–¥—ã."
    await message.answer(f"{workout_description} –º–∏–Ω—É—Ç - –∑–∞–ø–∏—Å–∞–Ω–æ {calories_spent} –∫–∫–∞–ª.{message_water}")

# --------------------------------

@router.message(Command("check_progress"))
async def check_progress(message: Message, state: FSMContext):
    username = message.from_user.username
    data = users_data.get(username, {})
    logged_water = data.get("logged_water", 0)
    base_water_norm = await get_base_water_goal(weight=data.get("weight", 0), activity=data.get("activity", 0), city=data.get("city", 0))
    water_left_to_goal = max(0, base_water_norm - logged_water)
    
    logged_calories = data.get("logged_calories", 0)
    burned_calories = data.get("burned_calories", 0)
    calorie_goal = data.get("calorie_goal", 0)
    calorie_balance = calorie_goal + burned_calories - logged_calories

    await message.reply(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n–í–æ–¥–∞:\n- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {base_water_norm} –º–ª.\n- –û—Å—Ç–∞–ª–æ—Å—å: {water_left_to_goal} –º–ª.\n\n–ö–∞–ª–æ—Ä–∏–∏:\n- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n- –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª.\n- –ë–∞–ª–∞–Ω—Å: {calorie_balance} –∫–∫–∞–ª.")

# --------------------------------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp):
    dp.include_router(router)
